// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Riva.Models.HAYDEN;

namespace Riva.Models.Migrations
{
    [DbContext(typeof(HAYDENContext))]
    partial class HAYDENContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Riva.Models.HAYDEN.Customers", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnName("CustomerID")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Address1")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("CustIdno")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustIDNo")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailAddress")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Fax")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Region")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ShippingMethod")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("CustomerId")
                        .HasName("PK_Customers_1");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.GemInventory", b =>
                {
                    b.Property<int>("GemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GemID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CustomerSku")
                        .HasColumnName("CustomerSKU")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUsed")
                        .HasColumnType("datetime");

                    b.Property<string>("GemColor")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("GemName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LinkedOrder")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LinkedOrderItem")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Location")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Shape")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("SizeMm")
                        .HasColumnName("SizeMM")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnName("SKU")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("WeightCarat")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("GemId");

                    b.ToTable("GemInventory");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.GemStatus", b =>
                {
                    b.Property<int>("GemStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GemStatusID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("GemStatusId");

                    b.ToTable("GemStatus");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.HistoryLogs", b =>
                {
                    b.Property<int>("LogIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("NewFieldValue")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("OldFieldValue")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int>("TableIdx")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("UserID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("LogIdx")
                        .HasName("PK__HistoryL__D80CB562542E7F4B");

                    b.ToTable("HistoryLogs");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.InventoryLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BarcodeId")
                        .HasColumnName("BarcodeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("GramWgtNew")
                        .HasColumnName("GramWGT_New")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("GramWgtOld")
                        .HasColumnName("GramWGT_Old")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("ItemNo")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ItemType")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Karat")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal>("QtyNew")
                        .HasColumnName("QTY_New")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal?>("QtyOld")
                        .HasColumnName("QTY_Old")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("WebUser")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Inventory_Log");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.JewelryType", b =>
                {
                    b.Property<int>("JewelryTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JewelryTypeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("JewelryTypeId");

                    b.ToTable("JewelryType");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.Login", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnName("Last_login")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LoginID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(128)")
                        .HasMaxLength(128);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserName");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.MaterialCodes", b =>
                {
                    b.Property<int>("MaterialCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MaterialCodeID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Color")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Karat")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("MaterialCodeId");

                    b.ToTable("MaterialCodes");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.MetalMarket", b =>
                {
                    b.Property<int>("MetalMarketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("MetalMarketID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EnteredDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Gold")
                        .HasColumnType("money");

                    b.Property<DateTime?>("MarketDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Palladium")
                        .HasColumnType("money");

                    b.Property<decimal?>("Platinum")
                        .HasColumnType("money");

                    b.Property<decimal?>("Rhodium")
                        .HasColumnType("money");

                    b.Property<decimal?>("Silver")
                        .HasColumnType("money");

                    b.HasKey("MetalMarketId");

                    b.ToTable("MetalMarket");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.Orders", b =>
                {
                    b.Property<int>("OrdersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrdersID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnName("CustomerID")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderNoCustomer")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("OrderNoInternal")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequiredDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime");

                    b.HasKey("OrdersId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.OrdersDetails", b =>
                {
                    b.Property<int>("OrdersDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrdersDetailsID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("MaterialCode")
                        .HasColumnType("int");

                    b.Property<int>("OrdersId")
                        .HasColumnName("OrdersID")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnName("ProductsID")
                        .HasColumnType("int");

                    b.Property<int>("Qtyrequested")
                        .HasColumnName("QTYRequested")
                        .HasColumnType("int");

                    b.Property<int>("Qtyshipped")
                        .HasColumnName("QTYShipped")
                        .HasColumnType("int");

                    b.Property<decimal?>("Size")
                        .HasColumnType("decimal(10, 3)");

                    b.HasKey("OrdersDetailsId");

                    b.HasIndex("OrdersId");

                    b.ToTable("OrdersDetails");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.OrdersDetailsRgw", b =>
                {
                    b.Property<int>("OrdersDetailsRgwid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrdersDetailsRGWID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MoldCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("OrderCode")
                        .HasColumnType("int");

                    b.Property<int>("OrderDetailsId")
                        .HasColumnName("OrderDetailsID")
                        .HasColumnType("int");

                    b.Property<bool>("ResizeWax")
                        .HasColumnType("bit");

                    b.Property<string>("RivaCode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("OrdersDetailsRgwid");

                    b.HasIndex("OrderDetailsId");

                    b.ToTable("OrdersDetailsRGW");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.OrdersStatus", b =>
                {
                    b.Property<int>("OrdersStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrdersStatusID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("OrdersStatusId");

                    b.ToTable("OrdersStatus");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.Products", b =>
                {
                    b.Property<int>("ProductsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductsID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentBox")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("('RIVA')")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("CustomerSku")
                        .HasColumnName("CustomerSKU")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FirstProductionDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("JewelryType")
                        .HasColumnType("int");

                    b.Property<string>("PicPath")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ProductDesc")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<bool>("ProductFlag")
                        .HasColumnType("bit");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Sku")
                        .HasColumnName("SKU")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("ProductsId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ProductsBom", b =>
                {
                    b.Property<int>("ProductsBomid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductsBOMID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("ProductsId")
                        .HasColumnName("ProductsID")
                        .HasColumnType("int");

                    b.Property<decimal>("Qty")
                        .HasColumnName("QTY")
                        .HasColumnType("decimal(6, 2)");

                    b.HasKey("ProductsBomid");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductsBOM");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ProductsPrices", b =>
                {
                    b.Property<int>("ProductsWhslid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductsWHSLID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MaterialCode")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<int>("ProductsId")
                        .HasColumnName("ProductsID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Size")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<bool?>("WholeSale")
                        .HasColumnType("bit");

                    b.HasKey("ProductsWhslid")
                        .HasName("PK_ProductsPriceWHSL");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductsPrices");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ProductsStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("StatusID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("StatusId")
                        .HasName("PK_ProductStatus");

                    b.ToTable("ProductsStatus");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ProductsStock", b =>
                {
                    b.Property<int>("ProductsStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductsStockID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaterialCode")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnName("ProductsID")
                        .HasColumnType("int");

                    b.Property<decimal>("Qty")
                        .HasColumnName("QTY")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<decimal?>("Size")
                        .HasColumnType("decimal(5, 3)");

                    b.Property<int>("Uom")
                        .HasColumnName("UOM")
                        .HasColumnType("int");

                    b.HasKey("ProductsStockId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductsStock");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ProductsWtg", b =>
                {
                    b.Property<int>("ProductsWtgid")
                        .HasColumnName("ProductsWTGID")
                        .HasColumnType("int");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<int>("ProductsId")
                        .HasColumnName("ProductsID")
                        .HasColumnType("int");

                    b.Property<decimal>("Wtg")
                        .HasColumnName("WTG")
                        .HasColumnType("decimal(6, 3)");

                    b.HasKey("ProductsWtgid");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductsWTG");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.UnitsOfMeasure", b =>
                {
                    b.Property<int>("UnitsOfMeasureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UnitsOfMeasureID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Uom")
                        .IsRequired()
                        .HasColumnName("UOM")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("UnitsOfMeasureId");

                    b.ToTable("UnitsOfMeasure");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ZAspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("zAspNetRoles");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ZAspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("zAspNetUserClaims");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ZAspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("LoginProvider", "ProviderKey", "UserId")
                        .HasName("PK_dbo.AspNetUserLogins");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("zAspNetUserLogins");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ZAspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_dbo.AspNetUserRoles");

                    b.HasIndex("RoleId")
                        .HasName("IX_RoleId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("zAspNetUserRoles");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ZAspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("zAspNetUsers");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ZmapSpidApplicationUser", b =>
                {
                    b.Property<long>("Spid")
                        .HasColumnName("spid")
                        .HasColumnType("bigint");

                    b.Property<string>("LogId")
                        .HasColumnName("LogID")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.Property<string>("User")
                        .HasColumnName("user")
                        .HasColumnType("varchar(128)")
                        .HasMaxLength(128)
                        .IsUnicode(false);

                    b.HasKey("Spid")
                        .HasName("PK__map_spid__2DD52ACC019AD4A5");

                    b.ToTable("zmap_spid_application_user");
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.OrdersDetails", b =>
                {
                    b.HasOne("Riva.Models.HAYDEN.Orders", "Orders")
                        .WithMany("OrdersDetails")
                        .HasForeignKey("OrdersId")
                        .HasConstraintName("FK_OrdersDetails_Orders")
                        .IsRequired();
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.OrdersDetailsRgw", b =>
                {
                    b.HasOne("Riva.Models.HAYDEN.OrdersDetails", "OrderDetails")
                        .WithMany("OrdersDetailsRgw")
                        .HasForeignKey("OrderDetailsId")
                        .HasConstraintName("FK_OrdersDetailsRGW_OrdersDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ProductsBom", b =>
                {
                    b.HasOne("Riva.Models.HAYDEN.Products", "Products")
                        .WithMany("ProductsBom")
                        .HasForeignKey("ProductsId")
                        .HasConstraintName("FK_ProductsBOM_Products")
                        .IsRequired();
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ProductsPrices", b =>
                {
                    b.HasOne("Riva.Models.HAYDEN.Products", "Products")
                        .WithMany("ProductsPrices")
                        .HasForeignKey("ProductsId")
                        .HasConstraintName("FK_ProductsPrices_Products")
                        .IsRequired();
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ProductsStock", b =>
                {
                    b.HasOne("Riva.Models.HAYDEN.Products", "Products")
                        .WithMany("ProductsStock")
                        .HasForeignKey("ProductsId")
                        .HasConstraintName("FK_ProductsQTY_Products")
                        .IsRequired();
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ProductsWtg", b =>
                {
                    b.HasOne("Riva.Models.HAYDEN.Products", "Products")
                        .WithMany("ProductsWtg")
                        .HasForeignKey("ProductsId")
                        .HasConstraintName("FK_ProductsWTG_Products")
                        .IsRequired();
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ZAspNetUserClaims", b =>
                {
                    b.HasOne("Riva.Models.HAYDEN.ZAspNetUsers", "User")
                        .WithMany("ZAspNetUserClaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ZAspNetUserLogins", b =>
                {
                    b.HasOne("Riva.Models.HAYDEN.ZAspNetUsers", "User")
                        .WithMany("ZAspNetUserLogins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Riva.Models.HAYDEN.ZAspNetUserRoles", b =>
                {
                    b.HasOne("Riva.Models.HAYDEN.ZAspNetRoles", "Role")
                        .WithMany("ZAspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Riva.Models.HAYDEN.ZAspNetUsers", "User")
                        .WithMany("ZAspNetUserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
